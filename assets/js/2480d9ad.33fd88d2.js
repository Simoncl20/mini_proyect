"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3445],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),p=a,f=d["".concat(l,".").concat(p)]||d[p]||m[p]||i;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7055:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={},s=void 0,o={unversionedId:"docs/modules/statistics/Statistics/variance",id:"docs/modules/statistics/Statistics/variance",title:"variance",description:"variance(numbers: List[float]) -> float",source:"@site/docs/docs/modules/statistics/Statistics/variance.md",sourceDirName:"docs/modules/statistics/Statistics",slug:"/docs/modules/statistics/Statistics/variance",permalink:"/mini_proyect/docs/modules/statistics/Statistics/variance",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"standard_deviation",permalink:"/mini_proyect/docs/modules/statistics/Statistics/standard_deviation"},next:{title:"Welcome to your Documentation",permalink:"/mini_proyect/"}},l={},c=[{value:"<code>variance(numbers: List[float]) -&gt; float</code>",id:"variancenumbers-listfloat---float",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],u={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"variancenumbers-listfloat---float"},(0,a.kt)("inlineCode",{parentName:"h2"},"variance(numbers: List[float]) -> float")),(0,a.kt)("h4",{id:"description"},"Description:"),(0,a.kt)("p",null,"This method calculates the variance of a list of numbers. This method belongs to the class Statistics."),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"numbers")," (",(0,a.kt)("inlineCode",{parentName:"li"},"List[float]"),"): A list of numbers for which the variance needs to be calculated.")),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"float"),": The variance of the given list of numbers.")),(0,a.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to calculate the variance of a list of numbers\nstat = Statistics()\nnumbers = [1, 2, 3, 4, 5]\nresult = stat.variance(numbers)\nprint(result)\n")),(0,a.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,a.kt)("p",null,"The method first checks if the ",(0,a.kt)("inlineCode",{parentName:"p"},"numbers")," list is empty. If it is empty, the method returns None. Otherwise, it calculates the mean of the numbers using the ",(0,a.kt)("inlineCode",{parentName:"p"},"mean")," method from the same class. Then, it subtracts the mean from each element in the ",(0,a.kt)("inlineCode",{parentName:"p"},"numbers")," list, squares the result, and sums up all the squared differences. Finally, it divides the sum by the length of the ",(0,a.kt)("inlineCode",{parentName:"p"},"numbers")," list to get the variance."),(0,a.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Calculator"),": This method depends on the ",(0,a.kt)("inlineCode",{parentName:"li"},"power")," method from the ",(0,a.kt)("inlineCode",{parentName:"li"},"Calculator")," class to calculate the squared differences.")))}m.isMDXComponent=!0}}]);